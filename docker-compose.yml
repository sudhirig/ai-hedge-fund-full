version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-hedge-fund-postgres
    environment:
      POSTGRES_DB: ai_hedge_fund
      POSTGRES_USER: ai_hedge_fund_user
      POSTGRES_PASSWORD: secure_password_2024
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/initial_data.sql:/docker-entrypoint-initdb.d/02-initial_data.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_hedge_fund_user -d ai_hedge_fund"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai-hedge-fund-network

  # PostgREST API for direct database access
  postgrest:
    image: postgrest/postgrest:v12.0.2
    container_name: ai-hedge-fund-postgrest
    environment:
      PGRST_DB_URI: postgres://ai_hedge_fund_user:secure_password_2024@postgres:5432/ai_hedge_fund
      PGRST_DB_SCHEMAS: public
      PGRST_DB_ANON_ROLE: ai_hedge_fund_user
      PGRST_SERVER_HOST: 0.0.0.0
      PGRST_SERVER_PORT: 3000
      PGRST_OPENAPI_SERVER_PROXY_URI: http://localhost:3001
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai-hedge-fund-network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: ai-hedge-fund-backend
    environment:
      - DATABASE_URL=postgresql://ai_hedge_fund_user:secure_password_2024@postgres:5432/ai_hedge_fund
      - FINANCIAL_DATASETS_API_KEY=${FINANCIAL_DATASETS_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./backend:/app/backend:ro
      - ./database:/app/database:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai-hedge-fund-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-hedge-fund-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_POSTGREST_URL=http://localhost:3001
      - GENERATE_SOURCEMAP=false
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
    networks:
      - ai-hedge-fund-network

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7-alpine
    container_name: ai-hedge-fund-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai-hedge-fund-network

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: ai-hedge-fund-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - postgrest
    networks:
      - ai-hedge-fund-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-hedge-fund-network:
    driver: bridge
